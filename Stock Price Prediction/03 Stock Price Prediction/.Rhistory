source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
data <- read.csv(paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/01 Regression Input/",filename,sep="")) # update filename
library(leaps)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
# Load libraries
library(leaps)
library(car)
# Create loop with each company
# Using DataCamp reference: https://campus.datacamp.com/courses/intermediate-r/chapter-2-loops?ex=8
companies <- list('fb.csv','cof.csv')
for (filename in companies) {
data <- read.csv(paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/01 Regression Input/",filename,sep="")) # update filename
reg_data <- data[0:90,]
attach(reg_data)
summary(reg_data)
# Best subsets
leaps(cbind(sp500,nasdaq,bond,tbill),close,nbest=2)
# Use best subset (lowest Mallow's Cp) to create model
# Create linear model
reg_dataa <- lm(close ~ sp500+nasdaq+bond+tbill)
summary(reg_dataa)
# Calculate VIFs
vif(reg_dataa)
# Plot diagnostics
stdres <- rstandard(reg_dataa)
plot(fitted(reg_dataa),stdres,xlab="Fitted values",ylab="Standardized residuals")
title(main = "Fitted values vs. Standardized residuals")
qqnorm(stdres)
hist(stdres)
detach(reg_data)
# Predict stock price using model selected
predict_data <- data
attach(predict_data)
predict_data1 <- predict(reg_dataa, predict_data)
predict_data$pred_close <- predict_data1
predict_data$pred_closediff <- (predict_data$close - predict_data$pred_close)
predict_data$newdate = as.Date(as.character(predict_data$誰..date),format='%Y%m%d')
plot(predict_data$newdate,predict_data$pred_closediff,type="p",main="Errors in stock price prediction",xlab="Date",ylab="Actual - Predicted stock price")
write.csv(predict_data,paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/02 Prediction Output/02 Price Outputs/",filename,sep=""),row.names=TRUE)
}
# Load libraries
library(leaps)
library(car)
# Create loop with each company
# Using DataCamp reference: https://campus.datacamp.com/courses/intermediate-r/chapter-2-loops?ex=8
companies <- list('fb.csv','cof.csv')
for (filename in companies) {
data <- read.csv(paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/01 Regression Input/",filename,sep="")) # update filename
reg_data <- data[0:90,]
attach(reg_data)
summary(reg_data)
# Best subsets
leaps(cbind(sp500,nasdaq,bond,tbill),close,nbest=2)
# Use best subset (lowest Mallow's Cp) to create model
# Create linear model
reg_dataa <- lm(close ~ sp500+nasdaq+bond+tbill)
summary(reg_dataa)
# Calculate VIFs
vif(reg_dataa)
# Plot diagnostics
stdres <- rstandard(reg_dataa)
plot(fitted(reg_dataa),stdres,xlab="Fitted values",ylab="Standardized residuals")
title(main = "Fitted values vs. Standardized residuals")
qqnorm(stdres)
hist(stdres)
detach(reg_data)
# Predict stock price using model selected
predict_data <- data
attach(predict_data)
predict_data1 <- predict(reg_dataa, predict_data)
predict_data$pred_close <- predict_data1
predict_data$pred_closediff <- (predict_data$close - predict_data$pred_close)
predict_data$newdate = as.Date(as.character(predict_data$誰..date),format='%Y%m%d')
plot(predict_data$newdate,predict_data$pred_closediff,type="p",main="Errors in stock price prediction",xlab="Date",ylab="Actual - Predicted stock price")
write.csv(predict_data,paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/02 Prediction Output/02 Price Outputs/",filename,sep=""),row.names=TRUE)
}
as.Date(40182)
# Load libraries
library(leaps)
library(car)
library(zoo)
# Create loop with each company
# Using DataCamp reference: https://campus.datacamp.com/courses/intermediate-r/chapter-2-loops?ex=8
companies <- list('fb.csv','cof.csv')
for (filename in companies) {
data <- read.csv(paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/01 Regression Input/",filename,sep="")) # update filename
reg_data <- data[0:90,]
attach(reg_data)
summary(reg_data)
# Best subsets
leaps(cbind(sp500,nasdaq,bond,tbill),close,nbest=2)
# Use best subset (lowest Mallow's Cp) to create model
# Create linear model
reg_dataa <- lm(close ~ sp500+nasdaq+bond+tbill)
summary(reg_dataa)
# Calculate VIFs
vif(reg_dataa)
# Plot diagnostics
stdres <- rstandard(reg_dataa)
plot(fitted(reg_dataa),stdres,xlab="Fitted values",ylab="Standardized residuals")
title(main = "Fitted values vs. Standardized residuals")
qqnorm(stdres)
hist(stdres)
detach(reg_data)
# Predict stock price using model selected
predict_data <- data
attach(predict_data)
predict_data1 <- predict(reg_dataa, predict_data)
predict_data$pred_close <- predict_data1
predict_data$pred_closediff <- (predict_data$close - predict_data$pred_close)
predict_data$newdate = as.Date(predict_data$誰..date,format='%Y%m%d')
plot(predict_data$newdate,predict_data$pred_closediff,type="p",main="Errors in stock price prediction",xlab="Date",ylab="Actual - Predicted stock price")
write.csv(predict_data,paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/02 Prediction Output/02 Price Outputs/",filename,sep=""),row.names=TRUE)
}
# Load libraries
library(leaps)
library(car)
library(zoo)
# Create loop with each company
# Using DataCamp reference: https://campus.datacamp.com/courses/intermediate-r/chapter-2-loops?ex=8
companies <- list('fb.csv','cof.csv')
for (filename in companies) {
data <- read.csv(paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/01 Regression Input/",filename,sep="")) # update filename
reg_data <- data[0:90,]
attach(reg_data)
summary(reg_data)
# Best subsets
leaps(cbind(sp500,nasdaq,bond,tbill),close,nbest=2)
# Use best subset (lowest Mallow's Cp) to create model
# Create linear model
reg_dataa <- lm(close ~ sp500+nasdaq+bond+tbill)
summary(reg_dataa)
# Calculate VIFs
vif(reg_dataa)
# Plot diagnostics
stdres <- rstandard(reg_dataa)
plot(fitted(reg_dataa),stdres,xlab="Fitted values",ylab="Standardized residuals")
title(main = "Fitted values vs. Standardized residuals")
qqnorm(stdres)
hist(stdres)
detach(reg_data)
# Predict stock price using model selected
predict_data <- data
attach(predict_data)
predict_data1 <- predict(reg_dataa, predict_data)
predict_data$pred_close <- predict_data1
predict_data$pred_closediff <- (predict_data$close - predict_data$pred_close)
predict_data$newdate = as.Date(predict_data$誰..date,format='%Y%m%d',origin = "1899-12-30")
plot(predict_data$newdate,predict_data$pred_closediff,type="p",main="Errors in stock price prediction",xlab="Date",ylab="Actual - Predicted stock price")
write.csv(predict_data,paste("c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/02 Prediction Output/02 Price Outputs/",filename,sep=""),row.names=TRUE)
}
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
predict_data
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', encoding = 'UTF-8', echo=TRUE)
predict_data
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
attach(data
)
leaps(cbind(sp500,nasdaq,bond,tbill),close,nbest=2)
leaps$which
leaps$labl
leaps$label
print(leaps$label
)
$Cp
Cp
test <- leaps(cbind(sp500,nasdaq,bond,tbill),close,nbest=2)
test
test$which
min(test$Cp)
test$Cp
test$size
type(test$size)
test$Cp.index(min(test$Cp))
index(test,min(test$Cp))
test?
?test
test
test$which
test$which[3,]
test$which[0,]
test$which[3,]
typeof(test)
typeof(test$Cp)
min(test$Cp)
is.data.frame(test)
is.vector(test)
is.vector(test$Cp)
test$Cp[3]
which(test$Cp == min(test$Cp))
test$which[test$Cp == min(test$Cp),]
typeof(test$which[0,])
typeof(test$which[test$Cp == min(test$Cp),])
test$which[test$Cp == min(test$Cp),]
test$which[test$Cp == min(test$Cp),][1,]
test$which[test$Cp == min(test$Cp),][1]
substr?
?substr
equation <- ""
equation
if test$which[test$Cp == min(test$Cp),][1] == TRUE {
equation <- paste(equation,"sp500+",sep="")
}
if test$which[test$Cp == min(test$Cp),][2] == TRUE {
equation <- paste(equation,"nasdaq+",sep="")
}
if test$which[test$Cp == min(test$Cp),][3] == TRUE {
equation <- paste(equation,"bond+",sep="")
}
if test$which[test$Cp == min(test$Cp),][4] == TRUE {
equation <- paste(equation,"tbill+",sep="")
}
if test$which[test$Cp == min(test$Cp),][1] == TRUE {
equation <- paste(equation,"sp500+",sep="")
}
sp500_best <- test$which[test$Cp == min(test$Cp),][1]
sp500_best
if sp500_best == TRUE {
equation <- paste(equation,"sp500+",sep="")
}
if (test$which[test$Cp == min(test$Cp),][1] == TRUE){
equation <- paste(equation,"sp500+",sep="")
}
equation
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
source('C:/Users/riazu/Google Drive/Glucksman Fellowship/11 Stock Price Prediction Code/20200331 Stock Price Prediction Code v0.5', echo=TRUE)
equation
equation <- ""
if (test$which[test$Cp == min(test$Cp),][1] == TRUE) {
equation <- paste(equation,"sp500+",sep="")
}
if (test$which[test$Cp == min(test$Cp),][2] == TRUE) {
equation <- paste(equation,"nasdaq+",sep="")
}
if (test$which[test$Cp == min(test$Cp),][3] == TRUE) {
equation <- paste(equation,"bond+",sep="")
}
if (test$which[test$Cp == min(test$Cp),][4] == TRUE) {
equation <- paste(equation,"tbill+",sep="")
}
if (substr(equation,nchar(equation)-1,1) == "+") {
equation <- substr(equation,1,nchar(equation)-1)
}
equation
equation <- substr(equation,1,nchar(equation)-1)
equation
substr(equation,nchar(equation)-1,1) == "+"
substr(equation,nchar(equation)-1,1) == '+'
substr(equation,nchar(equation)-1,1)
substr(equation,nchar(equation)-2,1)
substr(equation,nchar(equation)-3,1)
substr(equation,nchar(equation)-1,2)
substr(equation,nchar(equation))
substr(equation,nchar(equation),10)
library(leaps)
library(car)
library(broom)
lmOut <- function(res, file="test.csv", ndigit=3, writecsv=T) {
# If summary has not been run on the model then run summary
if (length(grep("summary", class(res)))==0) res <- summary(res)
co <- res$coefficients
nvar <- nrow(co)
ncol <- ncol(co)
f <- res$fstatistic
formatter <- function(x) format(round(x,ndigit),nsmall=ndigit)
# This sets the number of rows before we start recording the coefficients
nstats <- 4
# G matrix stores data for output
G <- matrix("", nrow=nvar+nstats, ncol=ncol+1)
G[1,1] <- toString(res$call)
# Save rownames and colnames
G[(nstats+1):(nvar+nstats),1] <- rownames(co)
G[nstats, 2:(ncol+1)] <- colnames(co)
# Save Coefficients
G[(nstats+1):(nvar+nstats), 2:(ncol+1)] <- formatter(co)
# Save F-stat
G[1,2] <- paste0("F(",f[2],",",f[3],")")
G[2,2] <- formatter(f[1])
# Save F-p value
G[1,3] <- "Prob > P"
G[2,3] <- formatter(1-pf(f[1],f[2],f[3]))
# Save R2
G[1,4] <- "R-Squared"
G[2,4] <- formatter(res$r.squared)
# Save Adj-R2
G[1,5] <- "Adj-R2"
G[2,5] <- formatter(res$adj.r.squared)
print(G)
if (writecsv) write.csv(G, file=file, row.names=F)
}
r(0),alpha=character(0),beta=character(0))
consolidated_counter <- 0
# Create single file with all regression outputs
regression_consolidated <- data.frame(ticker=character(0),alpha=character(0),beta=character(0))
consolidated_counter <- 0
- "c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Return Prediction/01 Regression Input/"
filepath_output <- "c:/users/riazu/Google Drive/Glucksman Fellowship/23 Stock Return Prediction/02 Prediction Output/"
filepath_reg_results <- "c:/users/riazu/Google Drive/Glucksman Fellowship/23 Stock Return Prediction/03 Regression Results/"
filename <- 'cof
consolidated_counter <- consolidated_counter+1
data <- read.csv(paste0(filepath_input,filename,".csv"))
reg_data <- data[1:60,]
reg_dataa <- lm(reg_data$stock_return ~ market_return)
# Calculate VIFs
vif(reg_dataa)
filename <- 'cof'
consolidated_counter <- consolidated_counter+1
data <- read.csv(paste0(filepath_input,filename,".csv"))
reg_data <- data[1:60,]
summary(reg_data)
# Create linear model
reg_dataa <- lm(reg_data$stock_return ~ market_return)
data <- read.csv(paste0(filepath_input,filename,".csv"))
reg_data <- data[1:60,]
summary(reg_data)
# Create linear model
reg_dataa <- lm(reg_data$stock_return ~ market_return)
summary(reg_dataa)
# Create linear model
reg_dataa <- lm(reg_data$stock_return ~ reg_data$market_return)
reg_dataa
reg_data
data <- read.csv(paste0(filepath_input,filename,".csv"))
filepath_input <- "c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Return Prediction/01 Regression Input/"
data <- read.csv(paste0(filepath_input,filename,".csv"))
filepath_input <- "c:/users/riazu/Google Drive/Glucksman Fellowship/22 Stock Price Prediction/01 Regression Input/"
data <- read.csv(paste0(filepath_input,filename,".csv"))
regreg_data <- data[1:60,]
summary(reg_data)
# Create linear model
reg_dataa <- lm(reg_data$stock_return ~ reg_data$market_return)
summary(reg_dataa)
reg_data
regreg_data
reg_data <- data[1:60,]
summary(reg_data)
# Create linear model
reg_dataa <- lm(reg_data$stock_return ~ reg_data$market_return)
summary(reg_dataa)
# Calculate VIFs
vif(reg_dataa)
# Plot diagnostics
stdres <- rstandard(reg_dataa)
plot(fitted(reg_dataa),stdres,xlab="Fitted values",ylab="Standardized residuals")
title(main = "Fitted values vs. Standardized residuals")
qqnorm(stdres)
hist(stdres)
lmOut(reg_dataa, file=paste0(filepath_reg_results,filename," reg output.csv"))
regression_consolidated[consolidated_counter,ticker] <- filename
regression_consolidated[consolidated_counter,alpha] <- coef(reg_dataa)["(Intercept)"]
regression_consolidated[consolidated_counter,beta] <- coef(reg_dataa)["market_return"]
regression_consolidated
regression_consolidated[1,ticker] <- filename
regression_consolidated[1,ticker]
regression_consolidated[1,'ticker]
regression_consolidated[1,'ticker']
regression_consolidated[consolidated_counter,'ticker'] <- filename
regression_consolidated[consolidated_counter,'ticker']
regression_consolidated[consolidated_counter,'ticker'] <- 'cof'
regression_consolidated[1,'ticker'] <- 'cof'
regression_consolidated
# Create single file with all regression outputs
regression_consolidated <- data.frame(ticker=character(0),alpha=character(0),beta=character(0),stringsAsFactors=FALSE)
regression_consolidated[consolidated_counter,'ticker'] <- filename
regression_consolidated
regression_consolidated[consolidated_counter,'alpha'] <- coef(reg_dataa)["(Intercept)"]
regression_consolidated[consolidated_counter,'beta'] <- coef(reg_dataa)["market_return"]
regression_consolidated
View(reg_dataa)
regression_consolidated[consolidated_counter,'beta'] <- coef(reg_dataa)["reg_data$market_return"]
regression_consolidated
